
trigger:
- main
parameters:
- name: logging
  default: All
  type: string

variables:
- name: artifactsPath
  value: "$(Build.ArtifactStagingDirectory)/artifacts"
- name: BaseVersionNumber 
  value: "0.1"  
- name: Minor 
  value: $[counter(variables['BaseVersionNumber'], 1)]
- name: VersionNumber 
  value: $(BaseVersionNumber).$(Minor)
- name: verboselogging
  value: ${{parameters.logging}}
pool:
  vmImage: 'windows-latest'
stages:
- stage: build
  displayName: Build 
  jobs:
  - job: Build
    displayName: Build jobs 
    steps:
    - checkout: self
      clean: false 

    - powershell: |
       &"$(System.DefaultWorkingDirectory)/.build/pipeline-tasks.ps1" -Install   
      displayName: 'Install tools'

    - powershell: |
        &"$(System.DefaultWorkingDirectory)/.build/pipeline-tasks.ps1" -Build  -Install  
      displayName: 'Build'

    - powershell: |
        &"$(System.DefaultWorkingDirectory)/.build/pipeline-tasks.ps1" -Package -Install
      displayName: 'Package'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifacts Sql.System.Dacpacs'
      inputs:
        targetPath: '$(artifactsPath)/Sql.System.Dacpacs'
        artifact: 'Sql.System.Dacpacs'
        publishLocation: 'pipeline'

- stage: 
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: 
    environment: nuget_Sql_System_DacPacs
    displayName: "Publish to Github"
    strategy:
      runOnce:
        deploy:
          steps:
            - download: none
            - download: current
              artifact: 'Sql.System.Dacpacs'
              target: '$(artifactsPath)/Sql.System.Dacpacs'

            - task: NuGetCommand@2
              inputs:
                command: 'push'
                packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
                nuGetFeedType: 'external'
                publishFeedCredentials: 'NUget'